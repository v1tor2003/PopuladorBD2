generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model carro {
  id_carro     Int     @id @default(autoincrement())
  modelo       String  @db.VarChar(50)
  ano_fab      Int
  preco_carro  Float   @db.Float
  quantidade   Int?    @default(0)
  id_cor_fk    Int?
  id_versao_fk Int?
  cor          cor?    @relation(fields: [id_cor_fk], references: [id_cor], onDelete: Restrict, onUpdate: Restrict, map: "carro_ibfk_1")
  versao       versao? @relation(fields: [id_versao_fk], references: [id_versao], onDelete: Restrict, onUpdate: Restrict, map: "carro_ibfk_2")
  venda        venda[]

  @@index([id_cor_fk], map: "id_cor_fk")
  @@index([id_versao_fk], map: "id_versao_fk")
}

model cliente {
  id_cliente          Int            @id @default(autoincrement())
  id_detalhepessoa_fk Int            @unique(map: "id_detalhepessoa_fk")
  detalhespessoa      detalhespessoa @relation(fields: [id_detalhepessoa_fk], references: [id_detalhepessoa], onUpdate: Restrict, map: "cliente_ibfk_1")
  venda               venda[]
}

model cor {
  id_cor    Int     @id @default(autoincrement())
  nome_cor  String  @db.VarChar(30)
  preco_cor Float?  @db.Float
  carro     carro[]
}

model detalhespessoa {
  id_detalhepessoa  Int          @id @default(autoincrement())
  nome_pessoa       String       @db.VarChar(255)
  nascimento_pessoa DateTime     @db.Date
  phone_pessoa      String       @db.VarChar(20)
  cliente           cliente?
  funcionario       funcionario?
}

model funcionario {
  id_func             Int            @id @default(autoincrement())
  usuario_func        String?        @db.VarChar(40)
  senha_func          String?        @db.Char(16)
  salario_func        Float?         @db.Float
  cargo_func          String?        @db.VarChar(30)
  id_detalhepessoa_fk Int            @unique(map: "id_detalhepessoa_fk")
  detalhespessoa      detalhespessoa @relation(fields: [id_detalhepessoa_fk], references: [id_detalhepessoa], onUpdate: Restrict, map: "funcionario_ibfk_1")
  venda               venda[]
}

model venda {
  id_venda          Int          @id @default(autoincrement())
  data_venda        DateTime?    @db.Date
  id_funcionario_fk Int?
  id_carro_fk       Int?
  id_cliente_fk     Int?
  funcionario       funcionario? @relation(fields: [id_funcionario_fk], references: [id_func], onDelete: Restrict, onUpdate: Restrict, map: "venda_ibfk_1")
  carro             carro?       @relation(fields: [id_carro_fk], references: [id_carro], onDelete: Restrict, onUpdate: Restrict, map: "venda_ibfk_2")
  cliente           cliente?     @relation(fields: [id_cliente_fk], references: [id_cliente], onDelete: Restrict, onUpdate: Restrict, map: "venda_ibfk_3")

  @@index([id_carro_fk], map: "id_carro_fk")
  @@index([id_cliente_fk], map: "id_cliente_fk")
  @@index([id_funcionario_fk], map: "id_funcionario_fk")
}

model versao {
  id_versao    Int     @id @default(autoincrement())
  nome_versao  String  @unique(map: "nome_versao") @db.Char(10)
  preco_versao Float?  @db.Float
  carro        carro[]
}
